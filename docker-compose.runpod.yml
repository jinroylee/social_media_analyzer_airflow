version: '3.8'
x-airflow-common:
  &airflow-common
  image: apache/airflow:2.8.0
  env_file:
    - .env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # GPU-optimized package installation
    _PIP_ADDITIONAL_REQUIREMENTS: 'apache-airflow-providers-amazon boto3 python-dotenv textblob scikit-learn pandas numpy mlflow torch==2.1.0+cu118 torchvision==0.16.0+cu118 torchaudio==2.1.0+cu118 transformers accelerate'
    # Environment variables from .env file
    USE_S3_MODEL: ${USE_S3_MODEL:-true}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
    AWS_REGION: ${AWS_REGION:-us-east-1}
    S3_BUCKET_NAME: ${S3_BUCKET_NAME}
    S3_MODEL_KEY: ${S3_MODEL_KEY:-models/best_model_lora.pth}
    ENVIRONMENT: ${ENVIRONMENT:-runpod}
    DEBUG: ${DEBUG:-true}
    MODEL_PATH: ${MODEL_PATH:-models/best_model_lora.pth}
    USE_LORA: ${USE_LORA:-true}
    LORA_RANK: ${LORA_RANK:-8}
    CLIP_MODEL_NAME: ${CLIP_MODEL_NAME:-openai/clip-vit-large-patch14}
    FORCE_CPU: ${FORCE_CPU:-false}
    # MLflow Configuration
    MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-http://mlflow:5000}
    MLFLOW_EXPERIMENT_NAME: ${MLFLOW_EXPERIMENT_NAME:-social_media_engagement_prediction}
    MLFLOW_ARTIFACT_ROOT: ${MLFLOW_ARTIFACT_ROOT:-file:///opt/airflow/mlruns}
    # GPU Configuration
    NVIDIA_VISIBLE_DEVICES: all
    CUDA_VISIBLE_DEVICES: 0
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/data:/opt/airflow/data
    - ${AIRFLOW_PROJ_DIR:-.}/models:/opt/airflow/models
    - ${AIRFLOW_PROJ_DIR:-.}/mlruns:/opt/airflow/mlruns
    - ${AIRFLOW_PROJ_DIR:-.}/.env:/opt/airflow/.env
    - ${AIRFLOW_PROJ_DIR:-.}/modelfactory:/opt/airflow/modelfactory
    - ${AIRFLOW_PROJ_DIR:-.}/src:/opt/airflow/src
    - ${AIRFLOW_PROJ_DIR:-.}/outputs:/opt/airflow/outputs
    - ${AIRFLOW_PROJ_DIR:-.}/requirements.txt:/opt/airflow/requirements.txt
  user: "${AIRFLOW_UID:-50000}:0"
  # GPU access for ML training
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: all
            capabilities: [gpu]
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    # GPU access for ML tasks
    runtime: nvidia
    environment:
      <<: *airflow-common-env
      NVIDIA_VISIBLE_DEVICES: all

  mlflow:
    image: python:3.9-slim
    ports:
      - "5001:5000"
    environment:
      - MLFLOW_HOST=0.0.0.0
      - MLFLOW_PORT=5000
      - MLFLOW_BACKEND_STORE_URI=file:///mlflow/mlruns
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=file:///mlflow/mlruns
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/mlruns:/mlflow/mlruns
      - ${AIRFLOW_PROJ_DIR:-.}/start_mlflow.sh:/start_mlflow.sh
      - ${AIRFLOW_PROJ_DIR:-.}/gunicorn_config.py:/gunicorn_config.py
    working_dir: /mlflow
    command: bash /start_mlflow.sh
    restart: always

volumes:
  postgres-db-volume: 